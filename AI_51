import tkinter as tk 
from tkinter import messagebox 
class NQueensSolver: 
 def __init__(self, size): 
   self.size = size 
   self.board = [-1] * size 
   self.solutions = [] 
 def solve(self): 
   self._solve_recursive(0) 
   return self.solutions 
 def _solve_recursive(self, row): 
   if row == self.size: 
     self.solutions.append(self.board[:]) 
     return 
   for col in range(self.size): 
     if self.is_safe(row, col): 
       self.board[row] = col 
       self._solve_recursive(row + 1) 
       self.board[row] = -1 # backtrack 
 def is_safe(self, row, col): 
   for i in range(row): 
     if (self.board[i] == col or 
       abs(self.board[i] - col) == abs(i - row)): 
       return False 
   return True 

class NQueensGUI: 
 def __init__(self, root): 
   self.root = root 
   self.root.title("N-Queens Solver") 
   self.size_var = tk.IntVar() 
   self.size_var.set(8) 

   tk.Label(root, text="Enter N (board size):").pack() 
   tk.Entry(root, textvariable=self.size_var).pack() 
   tk.Button(root, text="Solve", command=self.solve).pack() 
   self.canvas = tk.Canvas(root, width=400, height=400) 
   self.canvas.pack() 

 def draw_board(self, board): 
   self.canvas.delete("all") 
   n = len(board)
   cell_size = 400 // n 
   for i in range(n): 
     for j in range(n): 
       color = "white" if (i + j) % 2 == 0 else "gray" 
       self.canvas.create_rectangle(j * cell_size, i * cell_size, (j + 1) * cell_size, (i + 1) * cell_size, fill=color) 
       if board[i] == j: 
         self.canvas.create_oval(j * cell_size + 10, i * cell_size + 10, (j + 1) * cell_size - 10, (i + 1) * cell_size - 10, fill="red") 

 def solve(self): 
   size = self.size_var.get() 
   if size < 1 or size > 20: 
     messagebox.showerror("Invalid Input", "Please enter N between 1 and 20") 
     return 
   solver = NQueensSolver(size) 
   solutions = solver.solve() 
   if not solutions: 
     messagebox.showinfo("No Solution", f"No solutions found for N = {size}") 
   else: 
     self.draw_board(solutions[0]) # Show the first solution 

if __name__ == "__main__": 
 root = tk.Tk() 
 gui = NQueensGUI(root) 
 root.mainloop() 
